CONCEPT:
================================================================================

One idea is to extend 'Tasks' to an aggregator of data from multiple sources.
This will allow someone to have one integrated view of everything they are
responsible for.  For example, someone may be working on a project where the bugs
are stored in BugZilla, issues from open source components are stored on github,
and personal work items are stored on GAE. When 'Tasks' becomes an aggregator,
all of the above data can be pulled into one unified view to give an user the total
picture of everything they need to work on without having to copy them over to a
single data source on a continual basis (say as new issues are logged on github).


CONTRACTS:
================================================================================

Any 'Tasks' DataSource needs to support some standard calls, listed in this
section (asterisk bullet indicates that it is required).

Authentication
--------------
* login: GET /user given loginName & password, returns array with single user record
  if a valid user and may embed authToken if server enforces authorization (like GAE),
  otherwise returns empty array []
- isLoginNameAvailable: GET /user with loginName, returns array of user(s) that
  match if any (empty array will indicate that loginName is available)
- guestSignup: POST /user with loginName & password, returns user record on success
- logout: POST /logout with UUID & authToken, returns 401 if unauthorized
  (this call is supported only on GAE server since it enforces authorization)

Bulk Fetches
------------
* getAll: GET /records with optional loadDoneProjectData & lastRetrievedAt on GAE
  and POST /Class/records with same options on Persevere
  (return a record set as specified in TasksJSON.txt)
- getModified: same as previous call, if lastRetrievedAt is provided fetch all
  records created/updatedAt after lastRetrievedAt

Record Manipulation
-------------------
All of the following calls require UUID and authToken.  On GAE server which enforces
authorization, 401 is returned if UUID/authToken pair is invalid.
The following calls can also handle an optional 'notfy' parameter to indicate if an
email notification is requested from the server. GAE server supports email notifications.
* create<Record>: POST /<record> with record in body
* update<Record>: PUT /<record> with record in body
* delete<Record>: PUT /<record> with record in body with 'status' set to 'deleted'
  (records are soft-deleted)

Administration
--------------
- cleanup: a user with 'Manager' role can call /cleanup with UUID/ATO and to delete
  soft-deleted data older than a certain 'cutoff' timestamp which if set to 0,
  all soft-deleted records will be deleted (POST on Persevere and GET on GAE)


DESIGN:
================================================================================

If one DataSource is identified as primary it is used for authentication/authorization/notifications and
proxying to other data sources (for single origin policy). Otherwise localStorage DataSource is used.

Each Project can aggregate records from one or more DataSources.

Each DataSource has an URL and Query specified.