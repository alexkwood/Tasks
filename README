A. 'TASKS' INTRODUCTION/GOALS
================================================================================
'Tasks' is is an Agile project management tool with a SproutCore-based GUI
and REST-based Servers. Persevere and Google App Engine (GAE) Servers are
supported out-of-the-box.  'Tasks' runs on the desktop and on iPads.

I started the 'Tasks' project in June 2009 with the following goals:

1) To become a comprehensive sample application that goes beyond  "hello world"
   examples (like "clock") and snippets showing off facets of SproutCore
   (like "drag").  I want to use 'Tasks' to learn SproutCore and showcase its
   capabilities on the desktop and iPad via a single application.

2) To illustrate how to engineer a non-trivial application using artifacts like
   a task development plan (features/tasks), wireframes/mockups (GUI design),
   statecharts/controller structure (design diagrams), and integration with
   REST-based Servers (API/JSON specifications).

3) To offer 'Tasks' as an intuitive and powerful agile software management
   tool to replace cumbersome task/issue tracking software.

4) To provide a superior GUI to manage SproutCore issues as it undegoes an
   explosive launch and maturation as a premier HTML5 framework.
	 What better that an application built in SproutCore to manage its issues?

'Tasks' is under development - maturing into a tool to manage the development
of complex software.  I hope you will find 'Tasks' useful as you start your
journey with SproutCore.  Please send me your feedback or code contributions!

-Suvajit Gupta (suvajit_gupta@yahoo.com)


B. GETTING STARTED WITH 'TASKS'
================================================================================

There are several things you can do with 'Tasks' (but you will have to read
section C below for all of them!):

1) Use it to learn SproutCore.  Read sections E, F, and H.

2) Deploy/use it as a tool (this will take about 20 minutes the first time).
   If you need to customize 'Tasks' (e.g., put in a custom logo), read section D.
   If you deploy locally or to your intranet, read sections E, F, and G.
   If you deploy to the cloud, read sections I or J.  
   Read section K for rebuilding/redeploying 'Tasks' on the cloud.

3) Contribute to 'Tasks' development and testing.  Read sections M and N.


C. DOWNLOADING 'TASKS' CODE
================================================================================

If you don't have SproutCore installed type...

sudo gem install sproutcore

Change to the directory where you would like to work on 'Tasks' and type...

git clone git://github.com/suvajitgupta/Tasks.git tasks
cd tasks/frameworks
git clone git://github.com/suvajitgupta/sproutcore.git
git clone git://github.com/FrozenCanuck/Ki.git ki
git clone git://github.com/etgryphon/sproutcore-ui.git scui
git clone git://github.com/etgryphon/sai.git
git clone git://github.com/etgryphon/sproutcore-uds.git scuds
cd ../


D. CUSTOMIZING 'TASKS' CODE
================================================================================

'Tasks' has some customizable settings to suit your specific needs.
This is useful if you deploy 'Tasks' on your intranet or the cloud (see below).
Search for "Customizable" within 'Tasks' code to see what you can modify.

1) One common scenario is to customize your "Installation Title/Logo":

  - Add your logo to the "apps/tasks/english.lproj/default_theme/images" folder
  - Modify "apps/tasks/core.js" to specify if it is a "Square Installation Logo"
  - Modify the Buildfile to customize the <InstallationTitle>
  - Modify "apps/tasks/english.lproj/main_page.js" to customize
    <InstallationTitle> and <installation-logo-filename>

2) Another common scenario is to build 'Tasks' in "To Do" mode (this is useful
   when using 'Tasks' to manage a list of things to do, personal or for a team):

  - Set "Software Mode" to false in "apps/tasks/core.js"

Commit your changes so that you can later get code updates from git...

git commit -m "customization" .


E. RUNNING PERSEVERE SERVER
================================================================================

Persevere is a bundled server you can use to run 'Tasks' locally on your machine
or deploy on your intranet if your whole team needs to access it.

1) To start the Persevere server...

./scripts/server-start.sh

2) To stop the Persevere server...

./scripts/server-stop.sh


F. CREATING USERS IN PERSEVERE
================================================================================

After starting the Persevere server (see above), run a script to create the
first user (after which you can log into 'Tasks' and use the User Manager GUI):

./scripts/user-add.sh "System Admin" "SA" "Manager" localhost:8088
(enter/reenter password and remember it!)

./scripts/user-add.sh "Guest User" "guest" "Guest" localhost:8088
(press Enter twice to create a blank password)


G. ADMINISTERING PERSEVERE
================================================================================

Navigate to the following URL to directly manipulate Persevere data:

http://localhost:8088/tasks-server/explorer.html


H. LAUNCHING 'TASKS' GUI
================================================================================

1) Start the SproutCore server...

sc-server --port 4400

2) Navigate to the following URL...

http://localhost:4400/tasks

3) Enter "SA" in the dialog box and the password you set earlier and press Enter.
   The 'Tasks' GUI should come up.

4) Add your projects and tasks and have fun with 'Tasks'!
   To get some sample data to play with, you can click
   on the Import button and paste in the contents of the file
   "apps/tasks/tests/data/import_data.txt"


I. DEPLOYING 'TASKS' ON GOOGLE APP ENGINE (GAE) MANUALLY
================================================================================

You can deploy 'Tasks' to the cloud using GAE.

1) If you don't have a GAE account, sign up here:
http://code.google.com/appengine/

2) Download and install the GAE SDK if you don't have it (link for Mac below):
http://googleappengine.googlecode.com/files/GoogleAppEngineLauncher-1.2.8.dmg

Run GoogleAppEngineLauncher and click on "Dashboard" icon on top right.

Login to your Google account and click "Create Application".

Enter a unique <application-identifier> and application title and press
"Create Application" button at the bottom.

You will be prompted to enter your mobile number to receive a registration code.
When you get the text message, copy the registation code into the prompt.

3) Get the Tasks-GAE server code:

cd ../
git clone git://github.com/joshholt/SproutCoreTasks-AppEngineBackend.git <application-identifier>

4) Build 'Tasks' for deployment (this may take a few minutes...)

cd tasks
sc-build -rc --build=build

5) After sc-build finishes, copy tasks production build for deployment on GAE:
(for this "cp" command make sure there is no slash after "static" which you may
get if you tab for filename completion)

cp -r tmp/build/static ../<application-identifier>

6) Configure GAE application before deployment:

cd ../<application-identifier>
Open "app.yaml" and replace <application-identifier> on first line
	
Commit your changes so that you can later get code updates from git...

git commit -m "customized configuration" .

7) Return to GoogleAppEngineLauncher application:

From "File" menu, choose "Add Existing Application..."
Click on "Browse" and find/select <application-identifier> folder and press "Choose",
and finally press "Add"

8) Now deploy to the cloud by pressing "Deploy"
   (this can take a few minutes...wait until it says "finished with exit code 0")

9) Browse to http://<application-identifier>.appspot.com to launch 'Tasks' from GAE

10) Press the "Guest Sign Up" button on the login screen and you are ready to go!
(the first user to sign up will automatically have role of "Manager" so they can
 administer other users)


J. DEPLOYING 'TASKS' ON GAE USING SCRIPT
================================================================================

1) Run the following command from inside 'Tasks' root directory
	> python tasks.py setup <application-identifier> build
	
2) Then follow steps 8 & 9 below in the GOOGLE APP ENGINE DEPLOYMENT


K. REBUILDING/REDEPLOYING 'TASKS' ON GAE
================================================================================

If you made any mistakes while building or deploying or need to make additional
changes to Tasks later, follow these steps:

In the "tasks" directory enter...

rm -rf tmp

From section I, repeat steps 4-5 followed by steps 8-9

Periodically, you can fetch code updates from git to get new features and fixes.
Make sure any changes you made are committed (see section D).
To get code updates while you are in the "tasks" directory:

git fetch origin
git rebase origin/master

You can also get GAE code updates with the same commands while in your GAE
Server directory "<application-identifier>".


L. ADMINISTERING GAE
================================================================================

If you need to add/update/delete GAE applications run GoogleAppEngineLauncher
and press the "Dashboard" button.  Login to your Google account and click on
"My Applications" to get access to your applications.

To modify any data directly in the database click on "Datastore Viewer"
button under the "Data" group.  Choose the type of 'Tasks' records to view/edit.



M. 'TASKS' ARTIFACTS
================================================================================

'Tasks' ships with several artifacts in the "documents" folder to help you
understand its design/plans:

1) "plans/TasksDevelopmentPlan.txt" shows the work breakdown and assignments
   (see last sentence of Step 8).

2) "GUI/TasksWireframe.png" shows the initial GUI design with callouts explaining
   the key functionality.

3) "GUI/TasksMockup*.png" shows the visual design concepts used to style 'Tasks'.

4) "design/TasksStatecharts.pdf" shows the states/transitions within the GUI.

5) "design/TasksControllers.pdf" shows how the various controllers are wired
   and how the views relate to them (implementing the root controller pattern).

6) "API/TasksAPI.xml" drag this file into your browser - the files in the
   "include" folder render this specification in a nice format for you to
   understand the REST API endpoints.

7) "API/TasksJSON.xml" documents the model object structure for what is sent to
   the server via REST calls.

8) "API/TasksFileFormat.txt" Shows the simple/intuitive syntax for importing data
   into and exporting data from 'Tasks'.  In fact, the TasksPlan.txt is itself
   written in this format and can be imported into 'Tasks'!


N. AUTOMATED TESTING OF 'TASKS' WITH LEBOWSKI
================================================================================

Lebowski is used to test 'Tasks' end-to-end (GUI<=>API/Server/DB).
First get the latest Lebowski...

sudo gem install lebowski

1) From another terminal window, run the Lebowski server:

lebowski-start-server

2) In another terminal window, from the "tasks/spec" folder, run Lebowski scripts:

lebowski-spec -f n main.rb

To re-run the scripts:
  - stop Lebowski server by pressing "Control-C"
  - repeat steps 1) and 2)


APPENDIX. 'TASKS' ATTRIBUTIONS
================================================================================

The filter on/off icons:
Diagona Icons
Copyright (C) 2007 Yusuke Kamiyamane. All rights reserved.
The icons are licensed under a Creative Commons Attribution 3.0 license.

The color indicators on the filter icon, as well as numerous other icons in 'Tasks':
Silk icon set 1.3
Mark James - http://www.famfamfam.com/lab/icons/silk/